{"ast":null,"code":"// src/api/api.js\nimport http from \"./http\";\n\n/* -------------------------------------------------------\r\n   Pomoćna logika za prosleđivanje \"trenutnog\" userId-a\r\n   (dok nemaš pravi auth). Ako setuješ userId ovde, sve\r\n   funkcije će automatski slati X-User-Id header.\r\n------------------------------------------------------- */\nlet _userIdHeader = null;\nexport function setUserIdHeader(userId) {\n  _userIdHeader = userId !== null && userId !== void 0 ? userId : null;\n}\nfunction withUser(headers = {}) {\n  return _userIdHeader ? {\n    ...headers,\n    \"X-User-Id\": _userIdHeader\n  } : headers;\n}\n\n/* =======================================================\r\n   USERS\r\n======================================================= */\n\n/**\r\n * Vrati trenutno prijavljenog korisnika.\r\n * Backend podržava tri načina:\r\n * 1) ?id= (fallback dok nema auth)\r\n * 2) X-User-Id header (ako koristiš setUserIdHeader)\r\n * 3) security principal (kada uvedemo login)\r\n */\nexport async function getMe({\n  userId\n} = {}) {\n  const url = userId ? `/users/me?id=${userId}` : `/users/me`;\n  const res = await http.get(url, {\n    headers: withUser()\n  });\n  return res.data;\n}\n\n/** Lista korisnika sa opcionalnim pretraživanjem i paginacijom. */\nexport async function listUsers({\n  q,\n  page = 0,\n  size = 50\n} = {}) {\n  const res = await http.get(\"/users\", {\n    params: {\n      q,\n      page,\n      size\n    },\n    headers: withUser()\n  });\n  return res.data;\n}\nexport async function getUserById(id) {\n  const res = await http.get(`/users/${id}`, {\n    headers: withUser()\n  });\n  return res.data;\n}\nexport async function createUser(payload) {\n  const res = await http.post(\"/users\", payload, {\n    headers: withUser()\n  });\n  return res.data;\n}\nexport async function updateUser(id, payload) {\n  const res = await http.put(`/users/${id}`, payload, {\n    headers: withUser()\n  });\n  return res.data;\n}\nexport async function deleteUser(id) {\n  await http.delete(`/users/${id}`, {\n    headers: withUser()\n  });\n  return true;\n}\n\n/* =======================================================\r\n   NOTIFICATIONS\r\n======================================================= */\n\n/**\r\n * Broj nepročitanih notifikacija za badge u navbaru.\r\n * Backend: GET /api/notifications/unread/count?userId={id}\r\n */\nexport async function getUnreadCount(userId) {\n  if (!userId && !_userIdHeader) return 0;\n  const res = await http.get(\"/notifications/unread/count\", {\n    params: {\n      userId\n    },\n    headers: withUser()\n  });\n  return Number(res.data || 0);\n}\n\n/**\r\n * Lista notifikacija sa filterima (korisnik, samo nepročitane, limit).\r\n * Backend: GET /api/notifications?userId=&unread=true&limit=\r\n */\nexport async function getUnreadNotifications(userId, limit = 3) {\n  const res = await http.get(\"/notifications\", {\n    params: {\n      userId,\n      unread: true,\n      limit\n    },\n    headers: withUser()\n  });\n  return res.data;\n}\n\n/** Označi jednu notifikaciju kao pročitanu. POST /api/notifications/{id}/read */\nexport async function markNotificationRead(id) {\n  await http.post(`/notifications/${id}/read`, null, {\n    headers: withUser()\n  });\n  return true;\n}\n\n/** Označi sve notifikacije korisnika kao pročitane. POST /api/notifications/read-all?userId= */\nexport async function markAllNotificationsRead(userId) {\n  const res = await http.post(\"/notifications/read-all\", null, {\n    params: {\n      userId\n    },\n    headers: withUser()\n  });\n  return res.data; // broj ažuriranih redova\n}\n\n/* =======================================================\r\n   COURSES (stub za preporuke dok ne uvedemo pravi endpoint)\r\n======================================================= */\nexport async function getRecommendedCourses() {\n  // Kad bude spremno: return (await http.get(\"/courses/recommended\", { headers: withUser() })).data;\n  return [{\n    id: 1,\n    title: \"Java za početnike\",\n    meta: \"8h • 24 lekcije\"\n  }, {\n    id: 2,\n    title: \"Spring Boot REST API\",\n    meta: \"6h • 18 lekcija\"\n  }, {\n    id: 3,\n    title: \"React osnove\",\n    meta: \"5h • 15 lekcija\"\n  }];\n}","map":{"version":3,"names":["http","_userIdHeader","setUserIdHeader","userId","withUser","headers","getMe","url","res","get","data","listUsers","q","page","size","params","getUserById","id","createUser","payload","post","updateUser","put","deleteUser","delete","getUnreadCount","Number","getUnreadNotifications","limit","unread","markNotificationRead","markAllNotificationsRead","getRecommendedCourses","title","meta"],"sources":["C:/Users/mikir/Documents/NetBeansProjects/NJT_Projekat/e_learning_platform_njt_frontend/src/api/api.js"],"sourcesContent":["// src/api/api.js\r\nimport http from \"./http\";\r\n\r\n/* -------------------------------------------------------\r\n   Pomoćna logika za prosleđivanje \"trenutnog\" userId-a\r\n   (dok nemaš pravi auth). Ako setuješ userId ovde, sve\r\n   funkcije će automatski slati X-User-Id header.\r\n------------------------------------------------------- */\r\nlet _userIdHeader = null;\r\n\r\nexport function setUserIdHeader(userId) {\r\n  _userIdHeader = userId ?? null;\r\n}\r\n\r\nfunction withUser(headers = {}) {\r\n  return _userIdHeader ? { ...headers, \"X-User-Id\": _userIdHeader } : headers;\r\n}\r\n\r\n/* =======================================================\r\n   USERS\r\n======================================================= */\r\n\r\n/**\r\n * Vrati trenutno prijavljenog korisnika.\r\n * Backend podržava tri načina:\r\n * 1) ?id= (fallback dok nema auth)\r\n * 2) X-User-Id header (ako koristiš setUserIdHeader)\r\n * 3) security principal (kada uvedemo login)\r\n */\r\nexport async function getMe({ userId } = {}) {\r\n  const url = userId ? `/users/me?id=${userId}` : `/users/me`;\r\n  const res = await http.get(url, { headers: withUser() });\r\n  return res.data;\r\n}\r\n\r\n/** Lista korisnika sa opcionalnim pretraživanjem i paginacijom. */\r\nexport async function listUsers({ q, page = 0, size = 50 } = {}) {\r\n  const res = await http.get(\"/users\", {\r\n    params: { q, page, size },\r\n    headers: withUser(),\r\n  });\r\n  return res.data;\r\n}\r\n\r\nexport async function getUserById(id) {\r\n  const res = await http.get(`/users/${id}`, { headers: withUser() });\r\n  return res.data;\r\n}\r\n\r\nexport async function createUser(payload) {\r\n  const res = await http.post(\"/users\", payload, { headers: withUser() });\r\n  return res.data;\r\n}\r\n\r\nexport async function updateUser(id, payload) {\r\n  const res = await http.put(`/users/${id}`, payload, { headers: withUser() });\r\n  return res.data;\r\n}\r\n\r\nexport async function deleteUser(id) {\r\n  await http.delete(`/users/${id}`, { headers: withUser() });\r\n  return true;\r\n}\r\n\r\n/* =======================================================\r\n   NOTIFICATIONS\r\n======================================================= */\r\n\r\n/**\r\n * Broj nepročitanih notifikacija za badge u navbaru.\r\n * Backend: GET /api/notifications/unread/count?userId={id}\r\n */\r\nexport async function getUnreadCount(userId) {\r\n  if (!userId && !_userIdHeader) return 0;\r\n  const res = await http.get(\"/notifications/unread/count\", {\r\n    params: { userId },\r\n    headers: withUser(),\r\n  });\r\n  return Number(res.data || 0);\r\n}\r\n\r\n/**\r\n * Lista notifikacija sa filterima (korisnik, samo nepročitane, limit).\r\n * Backend: GET /api/notifications?userId=&unread=true&limit=\r\n */\r\nexport async function getUnreadNotifications(userId, limit = 3) {\r\n  const res = await http.get(\"/notifications\", {\r\n    params: { userId, unread: true, limit },\r\n    headers: withUser(),\r\n  });\r\n  return res.data;\r\n}\r\n\r\n/** Označi jednu notifikaciju kao pročitanu. POST /api/notifications/{id}/read */\r\nexport async function markNotificationRead(id) {\r\n  await http.post(`/notifications/${id}/read`, null, { headers: withUser() });\r\n  return true;\r\n}\r\n\r\n/** Označi sve notifikacije korisnika kao pročitane. POST /api/notifications/read-all?userId= */\r\nexport async function markAllNotificationsRead(userId) {\r\n  const res = await http.post(\"/notifications/read-all\", null, {\r\n    params: { userId },\r\n    headers: withUser(),\r\n  });\r\n  return res.data; // broj ažuriranih redova\r\n}\r\n\r\n/* =======================================================\r\n   COURSES (stub za preporuke dok ne uvedemo pravi endpoint)\r\n======================================================= */\r\nexport async function getRecommendedCourses() {\r\n  // Kad bude spremno: return (await http.get(\"/courses/recommended\", { headers: withUser() })).data;\r\n  return [\r\n    { id: 1, title: \"Java za početnike\", meta: \"8h • 24 lekcije\" },\r\n    { id: 2, title: \"Spring Boot REST API\", meta: \"6h • 18 lekcija\" },\r\n    { id: 3, title: \"React osnove\", meta: \"5h • 15 lekcija\" },\r\n  ];\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}