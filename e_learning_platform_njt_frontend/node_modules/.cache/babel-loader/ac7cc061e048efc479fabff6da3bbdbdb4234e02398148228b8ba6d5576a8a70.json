{"ast":null,"code":"// Centralni helper za fetch ka bekendu\nconst API = \"/api\";\n\n// -- USERS ---------------------------------------------------\nexport async function getMe({\n  userId\n} = {}) {\n  const url = userId ? `${API}/users/me?id=${userId}` : `${API}/users/me`;\n  const res = await fetch(url);\n  if (!res.ok) throw new Error(`getMe failed: ${res.status}`);\n  return res.json();\n}\n\n// -- NOTIFICATIONS -------------------------------------------\n/**\r\n * Listanje notifikacija:\r\n *   params: { userId: number, unread?: boolean, limit?: number, sort?: \"asc\"|\"desc\" }\r\n */\nexport async function getNotifications(params = {}) {\n  const q = new URLSearchParams();\n  if (params.userId != null) q.set(\"userId\", String(params.userId));\n  if (params.unread != null) q.set(\"unread\", String(!!params.unread));\n  if (params.limit != null) q.set(\"limit\", String(params.limit));\n  // sort ostavljamo da rešava backend ili ignorisemo za sada\n\n  const res = await fetch(`${API}/notifications?${q.toString()}`);\n  if (!res.ok) throw new Error(`getNotifications failed: ${res.status}`);\n  return res.json();\n}\nexport async function markNotificationRead(id) {\n  const res = await fetch(`${API}/notifications/${id}/read`, {\n    method: \"POST\"\n  });\n  if (!res.ok) throw new Error(`markNotificationRead failed: ${res.status}`);\n  return true;\n}\nexport async function markAllNotificationsRead(userId) {\n  const res = await fetch(`${API}/notifications/read-all?userId=${userId}`, {\n    method: \"POST\"\n  });\n  if (!res.ok) throw new Error(`markAllNotificationsRead failed: ${res.status}`);\n  return true;\n}\n\n/**\r\n * Broj nepročitanih notifikacija za korisnika\r\n */\nexport async function getUnreadCount(userId) {\n  const res = await fetch(`/api/notifications/unread-count?userId=${userId}`);\n  if (!res.ok) throw new Error(`getUnreadCount failed: ${res.status}`);\n  const num = await res.json();\n  // Ako backend vraća broj u objektu (npr. { count: 5 }), odkomentariši sledeću liniju:\n  // return typeof num === \"object\" ? num.count ?? 0 : Number(num);\n  return Number(num);\n}\n\n/**\r\n * Tipovi notifikacija.\r\n * Backend vraća [{ id, name }] ili [{ id, notificationTypeName }].\r\n * Ovaj helper uvek normalizuje na { id, notificationTypeName }.\r\n */\nexport async function getNotificationTypes() {\n  const res = await fetch(`${API}/notification-types`);\n  if (!res.ok) throw new Error(`getNotificationTypes failed: ${res.status}`);\n  const raw = await res.json();\n  return (Array.isArray(raw) ? raw : []).map(t => {\n    var _t$id, _ref, _ref2, _t$notificationTypeNa, _t$id2;\n    return {\n      id: (_t$id = t.id) !== null && _t$id !== void 0 ? _t$id : t.notificationTypeId,\n      notificationTypeName: (_ref = (_ref2 = (_t$notificationTypeNa = t.notificationTypeName) !== null && _t$notificationTypeNa !== void 0 ? _t$notificationTypeNa : t.name) !== null && _ref2 !== void 0 ? _ref2 : t.typeName) !== null && _ref !== void 0 ? _ref : String((_t$id2 = t.id) !== null && _t$id2 !== void 0 ? _t$id2 : \"\")\n    };\n  });\n}\n\n// -- (demo) PREPORUKE KURSEVA --------------------------------\nexport async function getRecommendedCourses() {\n  return Promise.resolve([{\n    id: 1,\n    title: \"Java za početnike\",\n    meta: \"8h • 24 lekcije\"\n  }, {\n    id: 2,\n    title: \"Spring Boot REST API\",\n    meta: \"6h • 18 lekcija\"\n  }, {\n    id: 3,\n    title: \"React osnove\",\n    meta: \"5h • 15 lekcija\"\n  }]);\n}","map":{"version":3,"names":["API","getMe","userId","url","res","fetch","ok","Error","status","json","getNotifications","params","q","URLSearchParams","set","String","unread","limit","toString","markNotificationRead","id","method","markAllNotificationsRead","getUnreadCount","num","Number","getNotificationTypes","raw","Array","isArray","map","t","_t$id","_ref","_ref2","_t$notificationTypeNa","_t$id2","notificationTypeId","notificationTypeName","name","typeName","getRecommendedCourses","Promise","resolve","title","meta"],"sources":["C:/Users/mikir/Documents/NetBeansProjects/NJT_Projekat/e_learning_platform_njt_frontend/src/api/api.js"],"sourcesContent":["// Centralni helper za fetch ka bekendu\r\nconst API = \"/api\";\r\n\r\n// -- USERS ---------------------------------------------------\r\nexport async function getMe({ userId } = {}) {\r\n  const url = userId ? `${API}/users/me?id=${userId}` : `${API}/users/me`;\r\n  const res = await fetch(url);\r\n  if (!res.ok) throw new Error(`getMe failed: ${res.status}`);\r\n  return res.json();\r\n}\r\n\r\n// -- NOTIFICATIONS -------------------------------------------\r\n/**\r\n * Listanje notifikacija:\r\n *   params: { userId: number, unread?: boolean, limit?: number, sort?: \"asc\"|\"desc\" }\r\n */\r\nexport async function getNotifications(params = {}) {\r\n  const q = new URLSearchParams();\r\n  if (params.userId != null) q.set(\"userId\", String(params.userId));\r\n  if (params.unread != null) q.set(\"unread\", String(!!params.unread));\r\n  if (params.limit != null) q.set(\"limit\", String(params.limit));\r\n  // sort ostavljamo da rešava backend ili ignorisemo za sada\r\n\r\n  const res = await fetch(`${API}/notifications?${q.toString()}`);\r\n  if (!res.ok) throw new Error(`getNotifications failed: ${res.status}`);\r\n  return res.json();\r\n}\r\n\r\nexport async function markNotificationRead(id) {\r\n  const res = await fetch(`${API}/notifications/${id}/read`, { method: \"POST\" });\r\n  if (!res.ok) throw new Error(`markNotificationRead failed: ${res.status}`);\r\n  return true;\r\n}\r\n\r\nexport async function markAllNotificationsRead(userId) {\r\n  const res = await fetch(`${API}/notifications/read-all?userId=${userId}`, { method: \"POST\" });\r\n  if (!res.ok) throw new Error(`markAllNotificationsRead failed: ${res.status}`);\r\n  return true;\r\n}\r\n\r\n/**\r\n * Broj nepročitanih notifikacija za korisnika\r\n */\r\nexport async function getUnreadCount(userId) {\r\n  const res = await fetch(`/api/notifications/unread-count?userId=${userId}`);\r\n  if (!res.ok) throw new Error(`getUnreadCount failed: ${res.status}`);\r\n  const num = await res.json();\r\n  // Ako backend vraća broj u objektu (npr. { count: 5 }), odkomentariši sledeću liniju:\r\n  // return typeof num === \"object\" ? num.count ?? 0 : Number(num);\r\n  return Number(num);\r\n}\r\n\r\n\r\n/**\r\n * Tipovi notifikacija.\r\n * Backend vraća [{ id, name }] ili [{ id, notificationTypeName }].\r\n * Ovaj helper uvek normalizuje na { id, notificationTypeName }.\r\n */\r\nexport async function getNotificationTypes() {\r\n  const res = await fetch(`${API}/notification-types`);\r\n  if (!res.ok) throw new Error(`getNotificationTypes failed: ${res.status}`);\r\n  const raw = await res.json();\r\n  return (Array.isArray(raw) ? raw : []).map(t => ({\r\n    id: t.id ?? t.notificationTypeId,\r\n    notificationTypeName:\r\n      t.notificationTypeName ?? t.name ?? t.typeName ?? String(t.id ?? \"\"),\r\n  }));\r\n}\r\n\r\n// -- (demo) PREPORUKE KURSEVA --------------------------------\r\nexport async function getRecommendedCourses() {\r\n  return Promise.resolve([\r\n    { id: 1, title: \"Java za početnike\", meta: \"8h • 24 lekcije\" },\r\n    { id: 2, title: \"Spring Boot REST API\", meta: \"6h • 18 lekcija\" },\r\n    { id: 3, title: \"React osnove\", meta: \"5h • 15 lekcija\" },\r\n  ]);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}