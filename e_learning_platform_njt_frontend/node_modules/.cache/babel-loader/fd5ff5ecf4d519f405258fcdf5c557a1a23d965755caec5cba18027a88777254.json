{"ast":null,"code":"// Centralizovan API helper – usklađeno sa backendom\nconst API = \"/api\";\n\n// Dok nemaš auth: šalji ?id= u /users/me i userId u notifikacije\nexport async function getMe({\n  userId\n} = {}) {\n  const url = userId ? `${API}/users/me?id=${userId}` : `${API}/users/me`;\n  const res = await fetch(url, {\n    cache: \"no-store\"\n  });\n  if (!res.ok) throw new Error(\"Ne mogu da učitam korisnika.\");\n  return res.json();\n}\n\n// Broj nepročitanih za badge\nexport async function getUnreadCount(userId) {\n  if (!userId) return 0;\n  const res = await fetch(`${API}/notifications/unread/count?userId=${userId}`, {\n    cache: \"no-store\"\n  });\n  if (!res.ok) return 0;\n  const n = await res.json();\n  return Number(n || 0);\n}\n\n// Lista notifikacija (unread = true => samo nepročitane; inače sve)\nexport async function getNotifications(userId, {\n  unread = false,\n  limit = 50\n} = {}) {\n  if (!userId) return [];\n  const url = new URL(`${API}/notifications`, window.location.origin);\n  url.searchParams.set(\"userId\", userId);\n  if (unread) url.searchParams.set(\"unread\", \"true\");\n  if (limit) url.searchParams.set(\"limit\", String(limit));\n  const res = await fetch(url.toString(), {\n    cache: \"no-store\"\n  });\n  if (!res.ok) throw new Error(\"Ne mogu da učitam notifikacije.\");\n  return res.json();\n}\n\n// Označi jednu kao pročitanu\nexport async function markNotificationRead(id) {\n  const res = await fetch(`${API}/notifications/${id}/read`, {\n    method: \"POST\"\n  });\n  if (!res.ok) throw new Error(\"Greška pri označavanju notifikacije.\");\n  return true;\n}\n\n// Označi sve korisnikove kao pročitane\nexport async function markAllNotificationsRead(userId) {\n  const res = await fetch(`${API}/notifications/read-all?userId=${userId}`, {\n    method: \"POST\"\n  });\n  if (!res.ok) throw new Error(\"Greška pri označavanju svih notifikacija.\");\n  return res.json(); // vraća broj ažuriranih\n}\n\n// (Stub) preporučeni kursevi – za demo kartice na Home\nexport async function getRecommendedCourses() {\n  return Promise.resolve([{\n    id: 1,\n    title: \"Java za početnike\",\n    meta: \"8h • 24 lekcije\"\n  }, {\n    id: 2,\n    title: \"Spring Boot REST API\",\n    meta: \"6h • 18 lekcija\"\n  }, {\n    id: 3,\n    title: \"React osnove\",\n    meta: \"5h • 15 lekcija\"\n  }]);\n}","map":{"version":3,"names":["API","getMe","userId","url","res","fetch","cache","ok","Error","json","getUnreadCount","n","Number","getNotifications","unread","limit","URL","window","location","origin","searchParams","set","String","toString","markNotificationRead","id","method","markAllNotificationsRead","getRecommendedCourses","Promise","resolve","title","meta"],"sources":["C:/Users/mikir/Documents/NetBeansProjects/NJT_Projekat/e_learning_platform_njt_frontend/src/api/api.js"],"sourcesContent":["// Centralizovan API helper – usklađeno sa backendom\r\nconst API = \"/api\";\r\n\r\n// Dok nemaš auth: šalji ?id= u /users/me i userId u notifikacije\r\nexport async function getMe({ userId } = {}) {\r\n  const url = userId ? `${API}/users/me?id=${userId}` : `${API}/users/me`;\r\n  const res = await fetch(url, { cache: \"no-store\" });\r\n  if (!res.ok) throw new Error(\"Ne mogu da učitam korisnika.\");\r\n  return res.json();\r\n}\r\n\r\n// Broj nepročitanih za badge\r\nexport async function getUnreadCount(userId) {\r\n  if (!userId) return 0;\r\n  const res = await fetch(`${API}/notifications/unread/count?userId=${userId}`, {\r\n    cache: \"no-store\",\r\n  });\r\n  if (!res.ok) return 0;\r\n  const n = await res.json();\r\n  return Number(n || 0);\r\n}\r\n\r\n// Lista notifikacija (unread = true => samo nepročitane; inače sve)\r\nexport async function getNotifications(userId, { unread = false, limit = 50 } = {}) {\r\n  if (!userId) return [];\r\n  const url = new URL(`${API}/notifications`, window.location.origin);\r\n  url.searchParams.set(\"userId\", userId);\r\n  if (unread) url.searchParams.set(\"unread\", \"true\");\r\n  if (limit) url.searchParams.set(\"limit\", String(limit));\r\n  const res = await fetch(url.toString(), { cache: \"no-store\" });\r\n  if (!res.ok) throw new Error(\"Ne mogu da učitam notifikacije.\");\r\n  return res.json();\r\n}\r\n\r\n// Označi jednu kao pročitanu\r\nexport async function markNotificationRead(id) {\r\n  const res = await fetch(`${API}/notifications/${id}/read`, { method: \"POST\" });\r\n  if (!res.ok) throw new Error(\"Greška pri označavanju notifikacije.\");\r\n  return true;\r\n}\r\n\r\n// Označi sve korisnikove kao pročitane\r\nexport async function markAllNotificationsRead(userId) {\r\n  const res = await fetch(`${API}/notifications/read-all?userId=${userId}`, {\r\n    method: \"POST\",\r\n  });\r\n  if (!res.ok) throw new Error(\"Greška pri označavanju svih notifikacija.\");\r\n  return res.json(); // vraća broj ažuriranih\r\n}\r\n\r\n// (Stub) preporučeni kursevi – za demo kartice na Home\r\nexport async function getRecommendedCourses() {\r\n  return Promise.resolve([\r\n    { id: 1, title: \"Java za početnike\", meta: \"8h • 24 lekcije\" },\r\n    { id: 2, title: \"Spring Boot REST API\", meta: \"6h • 18 lekcija\" },\r\n    { id: 3, title: \"React osnove\", meta: \"5h • 15 lekcija\" },\r\n  ]);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}