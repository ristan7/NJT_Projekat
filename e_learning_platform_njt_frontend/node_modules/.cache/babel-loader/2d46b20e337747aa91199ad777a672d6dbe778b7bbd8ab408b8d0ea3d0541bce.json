{"ast":null,"code":"// src/api/api.js\nimport http from \"./http\";\n\n// --- USER ---\nexport async function getMe({\n  userId\n} = {}) {\n  // tvoj /api/users/me podržava ?id= (fallback kad nema auth)\n  const url = userId ? `/users/me?id=${userId}` : \"/users/me\";\n  const res = await http.get(url);\n  return res.data;\n}\n\n// --- NOTIFICATIONS ---\n// lista (po korisniku), opcioni filter: unread i limit\nexport async function getNotifications(userId, {\n  unread = false,\n  limit = 50\n} = {}) {\n  const qs = new URLSearchParams();\n  if (userId) qs.set(\"userId\", userId); // ⬅⬅⬅ obavezno\n  if (unread) qs.set(\"unread\", \"true\");\n  if (limit) qs.set(\"limit\", String(limit));\n  const res = await fetch(`/api/notifications?${qs.toString()}`);\n  if (!res.ok) throw new Error(`Ne mogu da učitam notifikacije.`);\n  return res.json();\n}\n\n// badge (ako zatreba u Navbaru)\nexport async function getUnreadCount(userId) {\n  if (!userId) return 0;\n  const res = await http.get(`/notifications/unread/count`, {\n    params: {\n      userId\n    }\n  });\n  return Number(res.data || 0);\n}\n\n// označi jednu kao pročitanu\nexport async function markNotificationRead(id) {\n  await http.post(`/notifications/${id}/read`);\n}\n\n// Označi sve kao pročitane\nexport async function markAllNotificationsRead(userId) {\n  const res = await fetch(`/api/notifications/read-all?userId=${userId}`, {\n    method: \"POST\"\n  });\n  if (!res.ok) throw new Error(\"Greška pri označavanju svih notifikacija.\");\n  return true;\n}","map":{"version":3,"names":["http","getMe","userId","url","res","get","data","getNotifications","unread","limit","qs","URLSearchParams","set","String","fetch","toString","ok","Error","json","getUnreadCount","params","Number","markNotificationRead","id","post","markAllNotificationsRead","method"],"sources":["C:/Users/mikir/Documents/NetBeansProjects/NJT_Projekat/e_learning_platform_njt_frontend/src/api/api.js"],"sourcesContent":["// src/api/api.js\r\nimport http from \"./http\";\r\n\r\n// --- USER ---\r\nexport async function getMe({ userId } = {}) {\r\n  // tvoj /api/users/me podržava ?id= (fallback kad nema auth)\r\n  const url = userId ? `/users/me?id=${userId}` : \"/users/me\";\r\n  const res = await http.get(url);\r\n  return res.data;\r\n}\r\n\r\n// --- NOTIFICATIONS ---\r\n// lista (po korisniku), opcioni filter: unread i limit\r\nexport async function getNotifications(userId, { unread = false, limit = 50 } = {}) {\r\n  const qs = new URLSearchParams();\r\n  if (userId) qs.set(\"userId\", userId);   // ⬅⬅⬅ obavezno\r\n  if (unread) qs.set(\"unread\", \"true\");\r\n  if (limit) qs.set(\"limit\", String(limit));\r\n\r\n  const res = await fetch(`/api/notifications?${qs.toString()}`);\r\n  if (!res.ok) throw new Error(`Ne mogu da učitam notifikacije.`);\r\n  return res.json();\r\n}\r\n\r\n\r\n// badge (ako zatreba u Navbaru)\r\nexport async function getUnreadCount(userId) {\r\n  if (!userId) return 0;\r\n  const res = await http.get(`/notifications/unread/count`, { params: { userId } });\r\n  return Number(res.data || 0);\r\n}\r\n\r\n// označi jednu kao pročitanu\r\nexport async function markNotificationRead(id) {\r\n  await http.post(`/notifications/${id}/read`);\r\n}\r\n\r\n// Označi sve kao pročitane\r\nexport async function markAllNotificationsRead(userId) {\r\n  const res = await fetch(`/api/notifications/read-all?userId=${userId}`, { method: \"POST\" });\r\n  if (!res.ok) throw new Error(\"Greška pri označavanju svih notifikacija.\");\r\n  return true;\r\n}\r\n\r\n"],"mappings":"AAAA;AACA,OAAOA,IAAI,MAAM,QAAQ;;AAEzB;AACA,OAAO,eAAeC,KAAKA,CAAC;EAAEC;AAAO,CAAC,GAAG,CAAC,CAAC,EAAE;EAC3C;EACA,MAAMC,GAAG,GAAGD,MAAM,GAAG,gBAAgBA,MAAM,EAAE,GAAG,WAAW;EAC3D,MAAME,GAAG,GAAG,MAAMJ,IAAI,CAACK,GAAG,CAACF,GAAG,CAAC;EAC/B,OAAOC,GAAG,CAACE,IAAI;AACjB;;AAEA;AACA;AACA,OAAO,eAAeC,gBAAgBA,CAACL,MAAM,EAAE;EAAEM,MAAM,GAAG,KAAK;EAAEC,KAAK,GAAG;AAAG,CAAC,GAAG,CAAC,CAAC,EAAE;EAClF,MAAMC,EAAE,GAAG,IAAIC,eAAe,CAAC,CAAC;EAChC,IAAIT,MAAM,EAAEQ,EAAE,CAACE,GAAG,CAAC,QAAQ,EAAEV,MAAM,CAAC,CAAC,CAAG;EACxC,IAAIM,MAAM,EAAEE,EAAE,CAACE,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC;EACpC,IAAIH,KAAK,EAAEC,EAAE,CAACE,GAAG,CAAC,OAAO,EAAEC,MAAM,CAACJ,KAAK,CAAC,CAAC;EAEzC,MAAML,GAAG,GAAG,MAAMU,KAAK,CAAC,sBAAsBJ,EAAE,CAACK,QAAQ,CAAC,CAAC,EAAE,CAAC;EAC9D,IAAI,CAACX,GAAG,CAACY,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;EAC/D,OAAOb,GAAG,CAACc,IAAI,CAAC,CAAC;AACnB;;AAGA;AACA,OAAO,eAAeC,cAAcA,CAACjB,MAAM,EAAE;EAC3C,IAAI,CAACA,MAAM,EAAE,OAAO,CAAC;EACrB,MAAME,GAAG,GAAG,MAAMJ,IAAI,CAACK,GAAG,CAAC,6BAA6B,EAAE;IAAEe,MAAM,EAAE;MAAElB;IAAO;EAAE,CAAC,CAAC;EACjF,OAAOmB,MAAM,CAACjB,GAAG,CAACE,IAAI,IAAI,CAAC,CAAC;AAC9B;;AAEA;AACA,OAAO,eAAegB,oBAAoBA,CAACC,EAAE,EAAE;EAC7C,MAAMvB,IAAI,CAACwB,IAAI,CAAC,kBAAkBD,EAAE,OAAO,CAAC;AAC9C;;AAEA;AACA,OAAO,eAAeE,wBAAwBA,CAACvB,MAAM,EAAE;EACrD,MAAME,GAAG,GAAG,MAAMU,KAAK,CAAC,sCAAsCZ,MAAM,EAAE,EAAE;IAAEwB,MAAM,EAAE;EAAO,CAAC,CAAC;EAC3F,IAAI,CAACtB,GAAG,CAACY,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;EACzE,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}