{"ast":null,"code":"// Centralni helper za fetch ka bekendu\nconst API = \"/api\";\n\n// -- USERS ---------------------------------------------------\nexport async function getMe({\n  userId\n} = {}) {\n  const url = userId ? `${API}/users/me?id=${userId}` : `${API}/users/me`;\n  const res = await fetch(url);\n  if (!res.ok) throw new Error(\"Ne mogu da učitam korisnika.\");\n  return res.json();\n}\n\n// -- NOTIFICATIONS -------------------------------------------\n/**\r\n * Listanje notifikacija:\r\n *   params: { userId: number, unread?: boolean, limit?: number, sort?: \"asc\"|\"desc\" }\r\n */\nexport async function getNotifications({\n  userId,\n  unread,\n  limit,\n  sort,\n  dir,\n  q,\n  onlyTypes,\n  includeTypes\n} = {}) {\n  const p = new URLSearchParams();\n  if (userId != null) p.set(\"userId\", userId);\n  if (unread != null) p.set(\"unread\", unread ? \"true\" : \"false\");\n  if (limit != null) p.set(\"limit\", String(limit));\n  if (sort) p.set(\"sort\", sort);\n  if (dir) p.set(\"dir\", dir);\n  if (q) p.set(\"q\", q);\n  if (onlyTypes !== null && onlyTypes !== void 0 && onlyTypes.length) p.set(\"onlyTypes\", onlyTypes.join(\",\"));\n  if (includeTypes !== null && includeTypes !== void 0 && includeTypes.length) p.set(\"includeTypes\", includeTypes.join(\",\"));\n  const url = `${API}/notifications?${p.toString()}`;\n  const res = await fetch(url);\n  if (!res.ok) throw new Error(`Greška pri učitavanju: ${res.status}`);\n  return res.json();\n}\nexport async function markNotificationRead(id) {\n  const res = await fetch(`${API}/notifications/${id}/read`, {\n    method: \"POST\"\n  });\n  if (!res.ok) throw new Error(`markNotificationRead failed: ${res.status}`);\n  return true;\n}\nexport async function markAllNotificationsRead(userId) {\n  const res = await fetch(`${API}/notifications/read-all?userId=${userId}`, {\n    method: \"POST\"\n  });\n  if (!res.ok) throw new Error(`markAllNotificationsRead failed: ${res.status}`);\n  return true;\n}\n\n/**\r\n * Broj nepročitanih (badge u navbaru)\r\n * BACKEND: GET /api/notifications/unread/count?userId=123\r\n */\nexport async function getUnreadCount(userId) {\n  var _n$count;\n  const res = await fetch(`/api/notifications/unread/count?userId=${userId}`);\n  if (!res.ok) throw new Error(`getUnreadCount failed: ${res.status}`);\n  const n = await res.json();\n  return Number(typeof n === \"object\" ? (_n$count = n.count) !== null && _n$count !== void 0 ? _n$count : 0 : n);\n}\n\n/**\r\n * Tipovi notifikacija.\r\n * Backend vraća [{ id, name }] ili [{ id, notificationTypeName }].\r\n * Ovaj helper uvek normalizuje na { id, notificationTypeName }.\r\n */\nexport async function getNotificationTypes() {\n  const res = await fetch(`${API}/notification-types`);\n  if (!res.ok) throw new Error(`getNotificationTypes failed: ${res.status}`);\n  const raw = await res.json();\n  return (Array.isArray(raw) ? raw : []).map(t => {\n    var _t$id, _ref, _ref2, _t$notificationTypeNa, _t$id2;\n    return {\n      id: (_t$id = t.id) !== null && _t$id !== void 0 ? _t$id : t.notificationTypeId,\n      notificationTypeName: (_ref = (_ref2 = (_t$notificationTypeNa = t.notificationTypeName) !== null && _t$notificationTypeNa !== void 0 ? _t$notificationTypeNa : t.name) !== null && _ref2 !== void 0 ? _ref2 : t.typeName) !== null && _ref !== void 0 ? _ref : String((_t$id2 = t.id) !== null && _t$id2 !== void 0 ? _t$id2 : \"\")\n    };\n  });\n}\n\n// -- (demo) PREPORUKE KURSEVA --------------------------------\nexport async function getRecommendedCourses() {\n  return Promise.resolve([{\n    id: 1,\n    title: \"Java za početnike\",\n    meta: \"8h • 24 lekcije\"\n  }, {\n    id: 2,\n    title: \"Spring Boot REST API\",\n    meta: \"6h • 18 lekcija\"\n  }, {\n    id: 3,\n    title: \"React osnove\",\n    meta: \"5h • 15 lekcija\"\n  }]);\n}","map":{"version":3,"names":["API","getMe","userId","url","res","fetch","ok","Error","json","getNotifications","unread","limit","sort","dir","q","onlyTypes","includeTypes","p","URLSearchParams","set","String","length","join","toString","status","markNotificationRead","id","method","markAllNotificationsRead","getUnreadCount","_n$count","n","Number","count","getNotificationTypes","raw","Array","isArray","map","t","_t$id","_ref","_ref2","_t$notificationTypeNa","_t$id2","notificationTypeId","notificationTypeName","name","typeName","getRecommendedCourses","Promise","resolve","title","meta"],"sources":["C:/Users/mikir/Documents/NetBeansProjects/NJT_Projekat/e_learning_platform_njt_frontend/src/api/api.js"],"sourcesContent":["// Centralni helper za fetch ka bekendu\r\nconst API = \"/api\";\r\n\r\n// -- USERS ---------------------------------------------------\r\nexport async function getMe({ userId } = {}) {\r\n  const url = userId ? `${API}/users/me?id=${userId}` : `${API}/users/me`;\r\n  const res = await fetch(url);\r\n  if (!res.ok) throw new Error(\"Ne mogu da učitam korisnika.\");\r\n  return res.json();\r\n}\r\n\r\n// -- NOTIFICATIONS -------------------------------------------\r\n/**\r\n * Listanje notifikacija:\r\n *   params: { userId: number, unread?: boolean, limit?: number, sort?: \"asc\"|\"desc\" }\r\n */\r\nexport async function getNotifications({\r\n  userId,\r\n  unread,\r\n  limit,\r\n  sort,\r\n  dir,\r\n  q,\r\n  onlyTypes,\r\n  includeTypes,\r\n} = {}) {\r\n  const p = new URLSearchParams();\r\n  if (userId != null) p.set(\"userId\", userId);\r\n  if (unread != null) p.set(\"unread\", unread ? \"true\" : \"false\");\r\n  if (limit != null) p.set(\"limit\", String(limit));\r\n  if (sort) p.set(\"sort\", sort);\r\n  if (dir) p.set(\"dir\", dir);\r\n  if (q) p.set(\"q\", q);\r\n  if (onlyTypes?.length) p.set(\"onlyTypes\", onlyTypes.join(\",\"));\r\n  if (includeTypes?.length) p.set(\"includeTypes\", includeTypes.join(\",\"));\r\n\r\n  const url = `${API}/notifications?${p.toString()}`;\r\n  const res = await fetch(url);\r\n  if (!res.ok) throw new Error(`Greška pri učitavanju: ${res.status}`);\r\n  return res.json();\r\n}\r\n\r\nexport async function markNotificationRead(id) {\r\n  const res = await fetch(`${API}/notifications/${id}/read`, { method: \"POST\" });\r\n  if (!res.ok) throw new Error(`markNotificationRead failed: ${res.status}`);\r\n  return true;\r\n}\r\n\r\nexport async function markAllNotificationsRead(userId) {\r\n  const res = await fetch(`${API}/notifications/read-all?userId=${userId}`, { method: \"POST\" });\r\n  if (!res.ok) throw new Error(`markAllNotificationsRead failed: ${res.status}`);\r\n  return true;\r\n}\r\n\r\n/**\r\n * Broj nepročitanih (badge u navbaru)\r\n * BACKEND: GET /api/notifications/unread/count?userId=123\r\n */\r\nexport async function getUnreadCount(userId) {\r\n  const res = await fetch(`/api/notifications/unread/count?userId=${userId}`);\r\n  if (!res.ok) throw new Error(`getUnreadCount failed: ${res.status}`);\r\n  const n = await res.json();\r\n  return Number(typeof n === \"object\" ? n.count ?? 0 : n);\r\n}\r\n\r\n\r\n/**\r\n * Tipovi notifikacija.\r\n * Backend vraća [{ id, name }] ili [{ id, notificationTypeName }].\r\n * Ovaj helper uvek normalizuje na { id, notificationTypeName }.\r\n */\r\nexport async function getNotificationTypes() {\r\n  const res = await fetch(`${API}/notification-types`);\r\n  if (!res.ok) throw new Error(`getNotificationTypes failed: ${res.status}`);\r\n  const raw = await res.json();\r\n  return (Array.isArray(raw) ? raw : []).map(t => ({\r\n    id: t.id ?? t.notificationTypeId,\r\n    notificationTypeName:\r\n      t.notificationTypeName ?? t.name ?? t.typeName ?? String(t.id ?? \"\"),\r\n  }));\r\n}\r\n\r\n// -- (demo) PREPORUKE KURSEVA --------------------------------\r\nexport async function getRecommendedCourses() {\r\n  return Promise.resolve([\r\n    { id: 1, title: \"Java za početnike\", meta: \"8h • 24 lekcije\" },\r\n    { id: 2, title: \"Spring Boot REST API\", meta: \"6h • 18 lekcija\" },\r\n    { id: 3, title: \"React osnove\", meta: \"5h • 15 lekcija\" },\r\n  ]);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}