{"ast":null,"code":"// src/api/api.js\nimport http from \"./http\";\nconst API = \"/api\";\n\n// Current user (auth/me)\nexport async function getMe() {\n  const res = await http.get(\"/auth/me\"); // ← BEK: AuthController @GetMapping(\"/me\")\n  return res.data;\n}\n\n// Notifications\nexport async function getUnreadCount() {\n  const res = await http.get(\"/notifications/unread/count\"); // user iz tokena na beku\n  return Number(res.data || 0);\n}\nexport async function getNotifications({\n  unread = false,\n  limit = 50\n} = {}) {\n  const params = new URLSearchParams();\n  if (unread) params.set(\"unread\", \"true\");\n  if (limit != null) params.set(\"limit\", String(limit));\n  const res = await http.get(`/notifications?${params.toString()}`);\n  return res.data;\n}\nexport async function markNotificationRead(id) {\n  await http.post(`/notifications/${id}/read`);\n  return true;\n}\nexport async function markAllNotificationsRead() {\n  await http.post(`/notifications/read-all`);\n  return true;\n}\nexport async function getNotificationTypes() {\n  const res = await http.get(`/notification-types`);\n  return res.data;\n}\nexport async function deleteNotification(id) {\n  await http.delete(`/notifications/${id}`);\n  return true;\n}\n\n// List all users (for the \"New notification\" form)\nexport async function getUsers() {\n  const res = await http.get(\"/users\"); // backend route should return an array\n  return res.data;\n}\n\n// example stub\nexport async function getRecommendedCourses() {\n  return Promise.resolve([{\n    id: 1,\n    title: \"Java for Beginners\",\n    meta: \"8h • 24 lessons\"\n  }, {\n    id: 2,\n    title: \"Spring Boot REST API\",\n    meta: \"6h • 18 lessons\"\n  }, {\n    id: 3,\n    title: \"React Basics\",\n    meta: \"5h • 15 lessons\"\n  }]);\n}","map":{"version":3,"names":["http","API","getMe","res","get","data","getUnreadCount","Number","getNotifications","unread","limit","params","URLSearchParams","set","String","toString","markNotificationRead","id","post","markAllNotificationsRead","getNotificationTypes","deleteNotification","delete","getUsers","getRecommendedCourses","Promise","resolve","title","meta"],"sources":["C:/Users/mikir/Documents/NetBeansProjects/NJT_Projekat/e_learning_platform_njt_frontend/src/api/api.js"],"sourcesContent":["// src/api/api.js\r\nimport http from \"./http\";\r\n\r\nconst API = \"/api\";\r\n\r\n// Current user (auth/me)\r\nexport async function getMe() {\r\n  const res = await http.get(\"/auth/me\"); // ← BEK: AuthController @GetMapping(\"/me\")\r\n  return res.data;\r\n}\r\n\r\n// Notifications\r\nexport async function getUnreadCount() {\r\n  const res = await http.get(\"/notifications/unread/count\"); // user iz tokena na beku\r\n  return Number(res.data || 0);\r\n}\r\n\r\nexport async function getNotifications({ unread = false, limit = 50 } = {}) {\r\n  const params = new URLSearchParams();\r\n  if (unread) params.set(\"unread\", \"true\");\r\n  if (limit != null) params.set(\"limit\", String(limit));\r\n  const res = await http.get(`/notifications?${params.toString()}`);\r\n  return res.data;\r\n}\r\n\r\nexport async function markNotificationRead(id) {\r\n  await http.post(`/notifications/${id}/read`);\r\n  return true;\r\n}\r\n\r\nexport async function markAllNotificationsRead() {\r\n  await http.post(`/notifications/read-all`);\r\n  return true;\r\n}\r\n\r\nexport async function getNotificationTypes() {\r\n  const res = await http.get(`/notification-types`);\r\n  return res.data;\r\n}\r\n\r\nexport async function deleteNotification(id) {\r\n  await http.delete(`/notifications/${id}`);\r\n  return true;\r\n}\r\n\r\n// List all users (for the \"New notification\" form)\r\nexport async function getUsers() {\r\n  const res = await http.get(\"/users\"); // backend route should return an array\r\n  return res.data;\r\n}\r\n\r\n\r\n// example stub\r\nexport async function getRecommendedCourses() {\r\n  return Promise.resolve([\r\n    { id: 1, title: \"Java for Beginners\", meta: \"8h • 24 lessons\" },\r\n    { id: 2, title: \"Spring Boot REST API\", meta: \"6h • 18 lessons\" },\r\n    { id: 3, title: \"React Basics\", meta: \"5h • 15 lessons\" },\r\n  ]);\r\n}\r\n"],"mappings":"AAAA;AACA,OAAOA,IAAI,MAAM,QAAQ;AAEzB,MAAMC,GAAG,GAAG,MAAM;;AAElB;AACA,OAAO,eAAeC,KAAKA,CAAA,EAAG;EAC5B,MAAMC,GAAG,GAAG,MAAMH,IAAI,CAACI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;EACxC,OAAOD,GAAG,CAACE,IAAI;AACjB;;AAEA;AACA,OAAO,eAAeC,cAAcA,CAAA,EAAG;EACrC,MAAMH,GAAG,GAAG,MAAMH,IAAI,CAACI,GAAG,CAAC,6BAA6B,CAAC,CAAC,CAAC;EAC3D,OAAOG,MAAM,CAACJ,GAAG,CAACE,IAAI,IAAI,CAAC,CAAC;AAC9B;AAEA,OAAO,eAAeG,gBAAgBA,CAAC;EAAEC,MAAM,GAAG,KAAK;EAAEC,KAAK,GAAG;AAAG,CAAC,GAAG,CAAC,CAAC,EAAE;EAC1E,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;EACpC,IAAIH,MAAM,EAAEE,MAAM,CAACE,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC;EACxC,IAAIH,KAAK,IAAI,IAAI,EAAEC,MAAM,CAACE,GAAG,CAAC,OAAO,EAAEC,MAAM,CAACJ,KAAK,CAAC,CAAC;EACrD,MAAMP,GAAG,GAAG,MAAMH,IAAI,CAACI,GAAG,CAAC,kBAAkBO,MAAM,CAACI,QAAQ,CAAC,CAAC,EAAE,CAAC;EACjE,OAAOZ,GAAG,CAACE,IAAI;AACjB;AAEA,OAAO,eAAeW,oBAAoBA,CAACC,EAAE,EAAE;EAC7C,MAAMjB,IAAI,CAACkB,IAAI,CAAC,kBAAkBD,EAAE,OAAO,CAAC;EAC5C,OAAO,IAAI;AACb;AAEA,OAAO,eAAeE,wBAAwBA,CAAA,EAAG;EAC/C,MAAMnB,IAAI,CAACkB,IAAI,CAAC,yBAAyB,CAAC;EAC1C,OAAO,IAAI;AACb;AAEA,OAAO,eAAeE,oBAAoBA,CAAA,EAAG;EAC3C,MAAMjB,GAAG,GAAG,MAAMH,IAAI,CAACI,GAAG,CAAC,qBAAqB,CAAC;EACjD,OAAOD,GAAG,CAACE,IAAI;AACjB;AAEA,OAAO,eAAegB,kBAAkBA,CAACJ,EAAE,EAAE;EAC3C,MAAMjB,IAAI,CAACsB,MAAM,CAAC,kBAAkBL,EAAE,EAAE,CAAC;EACzC,OAAO,IAAI;AACb;;AAEA;AACA,OAAO,eAAeM,QAAQA,CAAA,EAAG;EAC/B,MAAMpB,GAAG,GAAG,MAAMH,IAAI,CAACI,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;EACtC,OAAOD,GAAG,CAACE,IAAI;AACjB;;AAGA;AACA,OAAO,eAAemB,qBAAqBA,CAAA,EAAG;EAC5C,OAAOC,OAAO,CAACC,OAAO,CAAC,CACrB;IAAET,EAAE,EAAE,CAAC;IAAEU,KAAK,EAAE,oBAAoB;IAAEC,IAAI,EAAE;EAAkB,CAAC,EAC/D;IAAEX,EAAE,EAAE,CAAC;IAAEU,KAAK,EAAE,sBAAsB;IAAEC,IAAI,EAAE;EAAkB,CAAC,EACjE;IAAEX,EAAE,EAAE,CAAC;IAAEU,KAAK,EAAE,cAAc;IAAEC,IAAI,EAAE;EAAkB,CAAC,CAC1D,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}