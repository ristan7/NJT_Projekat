{"ast":null,"code":"// Centralizovan API helper – usklađeno sa tvojim bekendom (plural paths)\nconst API = \"/api\";\n\n// Ako trenutno nemaš auth, prosledi userId kroz ?id= ili X-User-Id header\nexport async function getMe({\n  userId\n} = {}) {\n  const url = userId ? `${API}/users/me?id=${userId}` : `${API}/users/me`;\n  const res = await fetch(url);\n  if (!res.ok) throw new Error(\"Ne mogu da učitam korisnika.\");\n  return res.json();\n}\n\n// Badge za zvonce\nexport async function getUnreadCount(userId) {\n  if (!userId) return 0;\n  const res = await fetch(`${API}/notifications/unread/count?userId=${userId}`);\n  if (!res.ok) return 0;\n  const n = await res.json();\n  return Number(n || 0);\n}\n\n// Preview lista nepročitanih (max limit)\nexport async function getUnreadNotifications(userId, limit = 3) {\n  if (!userId) return [];\n  const res = await fetch(`${API}/notifications?userId=${userId}&unread=true&limit=${limit}`);\n  if (!res.ok) throw new Error(\"Ne mogu da učitam notifikacije.\");\n  return res.json();\n}\n\n// Označi jednu notifikaciju kao pročitanu\nexport async function markNotificationRead(id) {\n  const res = await fetch(`${API}/notifications/${id}/read`, {\n    method: \"POST\"\n  });\n  if (!res.ok) throw new Error(\"Greška pri označavanju notifikacije.\");\n  return true;\n}\n\n// (Stub) preporučeni kursevi – zamenićemo kasnije sa /api/courses/recommended\nexport async function getRecommendedCourses() {\n  return Promise.resolve([{\n    id: 1,\n    title: \"Java za početnike\",\n    meta: \"8h • 24 lekcije\"\n  }, {\n    id: 2,\n    title: \"Spring Boot REST API\",\n    meta: \"6h • 18 lekcija\"\n  }, {\n    id: 3,\n    title: \"React osnove\",\n    meta: \"5h • 15 lekcija\"\n  }]);\n}","map":{"version":3,"names":["API","getMe","userId","url","res","fetch","ok","Error","json","getUnreadCount","n","Number","getUnreadNotifications","limit","markNotificationRead","id","method","getRecommendedCourses","Promise","resolve","title","meta"],"sources":["C:/Users/mikir/Documents/NetBeansProjects/NJT_Projekat/e_learning_platform_njt_frontend/src/api.js"],"sourcesContent":["// Centralizovan API helper – usklađeno sa tvojim bekendom (plural paths)\r\nconst API = \"/api\";\r\n\r\n// Ako trenutno nemaš auth, prosledi userId kroz ?id= ili X-User-Id header\r\nexport async function getMe({ userId } = {}) {\r\n  const url = userId ? `${API}/users/me?id=${userId}` : `${API}/users/me`;\r\n  const res = await fetch(url);\r\n  if (!res.ok) throw new Error(\"Ne mogu da učitam korisnika.\");\r\n  return res.json();\r\n}\r\n\r\n// Badge za zvonce\r\nexport async function getUnreadCount(userId) {\r\n  if (!userId) return 0;\r\n  const res = await fetch(`${API}/notifications/unread/count?userId=${userId}`);\r\n  if (!res.ok) return 0;\r\n  const n = await res.json();\r\n  return Number(n || 0);\r\n}\r\n\r\n// Preview lista nepročitanih (max limit)\r\nexport async function getUnreadNotifications(userId, limit = 3) {\r\n  if (!userId) return [];\r\n  const res = await fetch(\r\n    `${API}/notifications?userId=${userId}&unread=true&limit=${limit}`\r\n  );\r\n  if (!res.ok) throw new Error(\"Ne mogu da učitam notifikacije.\");\r\n  return res.json();\r\n}\r\n\r\n// Označi jednu notifikaciju kao pročitanu\r\nexport async function markNotificationRead(id) {\r\n  const res = await fetch(`${API}/notifications/${id}/read`, { method: \"POST\" });\r\n  if (!res.ok) throw new Error(\"Greška pri označavanju notifikacije.\");\r\n  return true;\r\n}\r\n\r\n// (Stub) preporučeni kursevi – zamenićemo kasnije sa /api/courses/recommended\r\nexport async function getRecommendedCourses() {\r\n  return Promise.resolve([\r\n    { id: 1, title: \"Java za početnike\", meta: \"8h • 24 lekcije\" },\r\n    { id: 2, title: \"Spring Boot REST API\", meta: \"6h • 18 lekcija\" },\r\n    { id: 3, title: \"React osnove\", meta: \"5h • 15 lekcija\" },\r\n  ]);\r\n}\r\n"],"mappings":"AAAA;AACA,MAAMA,GAAG,GAAG,MAAM;;AAElB;AACA,OAAO,eAAeC,KAAKA,CAAC;EAAEC;AAAO,CAAC,GAAG,CAAC,CAAC,EAAE;EAC3C,MAAMC,GAAG,GAAGD,MAAM,GAAG,GAAGF,GAAG,gBAAgBE,MAAM,EAAE,GAAG,GAAGF,GAAG,WAAW;EACvE,MAAMI,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;EAC5B,IAAI,CAACC,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,OAAOH,GAAG,CAACI,IAAI,CAAC,CAAC;AACnB;;AAEA;AACA,OAAO,eAAeC,cAAcA,CAACP,MAAM,EAAE;EAC3C,IAAI,CAACA,MAAM,EAAE,OAAO,CAAC;EACrB,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGL,GAAG,sCAAsCE,MAAM,EAAE,CAAC;EAC7E,IAAI,CAACE,GAAG,CAACE,EAAE,EAAE,OAAO,CAAC;EACrB,MAAMI,CAAC,GAAG,MAAMN,GAAG,CAACI,IAAI,CAAC,CAAC;EAC1B,OAAOG,MAAM,CAACD,CAAC,IAAI,CAAC,CAAC;AACvB;;AAEA;AACA,OAAO,eAAeE,sBAAsBA,CAACV,MAAM,EAAEW,KAAK,GAAG,CAAC,EAAE;EAC9D,IAAI,CAACX,MAAM,EAAE,OAAO,EAAE;EACtB,MAAME,GAAG,GAAG,MAAMC,KAAK,CACrB,GAAGL,GAAG,yBAAyBE,MAAM,sBAAsBW,KAAK,EAClE,CAAC;EACD,IAAI,CAACT,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;EAC/D,OAAOH,GAAG,CAACI,IAAI,CAAC,CAAC;AACnB;;AAEA;AACA,OAAO,eAAeM,oBAAoBA,CAACC,EAAE,EAAE;EAC7C,MAAMX,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGL,GAAG,kBAAkBe,EAAE,OAAO,EAAE;IAAEC,MAAM,EAAE;EAAO,CAAC,CAAC;EAC9E,IAAI,CAACZ,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;EACpE,OAAO,IAAI;AACb;;AAEA;AACA,OAAO,eAAeU,qBAAqBA,CAAA,EAAG;EAC5C,OAAOC,OAAO,CAACC,OAAO,CAAC,CACrB;IAAEJ,EAAE,EAAE,CAAC;IAAEK,KAAK,EAAE,mBAAmB;IAAEC,IAAI,EAAE;EAAkB,CAAC,EAC9D;IAAEN,EAAE,EAAE,CAAC;IAAEK,KAAK,EAAE,sBAAsB;IAAEC,IAAI,EAAE;EAAkB,CAAC,EACjE;IAAEN,EAAE,EAAE,CAAC;IAAEK,KAAK,EAAE,cAAc;IAAEC,IAAI,EAAE;EAAkB,CAAC,CAC1D,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}