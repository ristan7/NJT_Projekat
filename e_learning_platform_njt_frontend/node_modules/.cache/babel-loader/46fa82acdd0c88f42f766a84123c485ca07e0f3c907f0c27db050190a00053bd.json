{"ast":null,"code":"// src/api/api.js\nconst API = \"/api\";\n\n// /users/me – isti kao ranije\nexport async function getMe({\n  userId\n} = {}) {\n  const url = userId ? `${API}/users/me?id=${userId}` : `${API}/users/me`;\n  const res = await fetch(url);\n  if (!res.ok) throw new Error(\"Ne mogu da učitam korisnika.\");\n  return res.json();\n}\n\n// ⬇️ OVO DODAJ / ISPRAVI\nexport async function getUnreadCount(userId) {\n  if (!userId) return 0;\n  const res = await fetch(`${API}/notifications/unread/count?userId=${userId}`);\n  if (!res.ok) return 0; // ako backend vrati 400/500, nemoj da puca UI\n  const n = await res.json();\n  return Number(n || 0);\n}\n\n// ostalo što već imaš:\nexport async function getNotifications({\n  userId,\n  unread = false,\n  limit = 50\n} = {}) {\n  const params = new URLSearchParams();\n  if (userId != null) params.set(\"userId\", userId);\n  if (unread) params.set(\"unread\", \"true\");\n  if (limit != null) params.set(\"limit\", limit);\n  const res = await fetch(`${API}/notifications?${params.toString()}`);\n  if (!res.ok) throw new Error(\"Ne mogu da učitam notifikacije.\");\n  return res.json();\n}\nexport async function markNotificationRead(id) {\n  const res = await fetch(`${API}/notifications/${id}/read`, {\n    method: \"POST\"\n  });\n  if (!res.ok) throw new Error(\"Greška pri označavanju notifikacije.\");\n  return true;\n}\nexport async function markAllNotificationsRead(userId) {\n  const res = await fetch(`${API}/notifications/read-all?userId=${userId}`, {\n    method: \"POST\"\n  });\n  if (!res.ok) throw new Error(\"Greška pri označavanju svih notifikacija.\");\n  return true;\n}\nexport async function getNotificationTypes() {\n  const res = await fetch(`${API}/notification-types`);\n  if (!res.ok) throw new Error(\"Ne mogu da učitam tipove notifikacija.\");\n  return res.json();\n}\n\n// Brisanje notifikacije po ID-u\nexport async function deleteNotification(id) {\n  const res = await fetch(`/api/notifications/${id}`, {\n    method: \"DELETE\"\n  });\n  if (!res.ok) throw new Error(`Greška pri brisanju notifikacije #${id}`);\n  return true;\n}\nexport async function getRecommendedCourses() {\n  return Promise.resolve([{\n    id: 1,\n    title: \"Java za početnike\",\n    meta: \"8h • 24 lekcije\"\n  }, {\n    id: 2,\n    title: \"Spring Boot REST API\",\n    meta: \"6h • 18 lekcija\"\n  }, {\n    id: 3,\n    title: \"React osnove\",\n    meta: \"5h • 15 lekcija\"\n  }]);\n}","map":{"version":3,"names":["API","getMe","userId","url","res","fetch","ok","Error","json","getUnreadCount","n","Number","getNotifications","unread","limit","params","URLSearchParams","set","toString","markNotificationRead","id","method","markAllNotificationsRead","getNotificationTypes","deleteNotification","getRecommendedCourses","Promise","resolve","title","meta"],"sources":["C:/Users/mikir/Documents/NetBeansProjects/NJT_Projekat/e_learning_platform_njt_frontend/src/api/api.js"],"sourcesContent":["// src/api/api.js\r\nconst API = \"/api\";\r\n\r\n// /users/me – isti kao ranije\r\nexport async function getMe({ userId } = {}) {\r\n  const url = userId ? `${API}/users/me?id=${userId}` : `${API}/users/me`;\r\n  const res = await fetch(url);\r\n  if (!res.ok) throw new Error(\"Ne mogu da učitam korisnika.\");\r\n  return res.json();\r\n}\r\n\r\n// ⬇️ OVO DODAJ / ISPRAVI\r\nexport async function getUnreadCount(userId) {\r\n  if (!userId) return 0;\r\n  const res = await fetch(`${API}/notifications/unread/count?userId=${userId}`);\r\n  if (!res.ok) return 0;               // ako backend vrati 400/500, nemoj da puca UI\r\n  const n = await res.json();\r\n  return Number(n || 0);\r\n}\r\n\r\n// ostalo što već imaš:\r\nexport async function getNotifications({ userId, unread = false, limit = 50 } = {}) {\r\n  const params = new URLSearchParams();\r\n  if (userId != null) params.set(\"userId\", userId);\r\n  if (unread) params.set(\"unread\", \"true\");\r\n  if (limit != null) params.set(\"limit\", limit);\r\n  const res = await fetch(`${API}/notifications?${params.toString()}`);\r\n  if (!res.ok) throw new Error(\"Ne mogu da učitam notifikacije.\");\r\n  return res.json();\r\n}\r\n\r\nexport async function markNotificationRead(id) {\r\n  const res = await fetch(`${API}/notifications/${id}/read`, { method: \"POST\" });\r\n  if (!res.ok) throw new Error(\"Greška pri označavanju notifikacije.\");\r\n  return true;\r\n}\r\n\r\nexport async function markAllNotificationsRead(userId) {\r\n  const res = await fetch(`${API}/notifications/read-all?userId=${userId}`, { method: \"POST\" });\r\n  if (!res.ok) throw new Error(\"Greška pri označavanju svih notifikacija.\");\r\n  return true;\r\n}\r\n\r\nexport async function getNotificationTypes() {\r\n  const res = await fetch(`${API}/notification-types`);\r\n  if (!res.ok) throw new Error(\"Ne mogu da učitam tipove notifikacija.\");\r\n  return res.json();\r\n}\r\n\r\n// Brisanje notifikacije po ID-u\r\nexport async function deleteNotification(id) {\r\n  const res = await fetch(`/api/notifications/${id}`, { method: \"DELETE\" });\r\n  if (!res.ok) throw new Error(`Greška pri brisanju notifikacije #${id}`);\r\n  return true;\r\n}\r\n\r\n\r\nexport async function getRecommendedCourses() {\r\n  return Promise.resolve([\r\n    { id: 1, title: \"Java za početnike\", meta: \"8h • 24 lekcije\" },\r\n    { id: 2, title: \"Spring Boot REST API\", meta: \"6h • 18 lekcija\" },\r\n    { id: 3, title: \"React osnove\", meta: \"5h • 15 lekcija\" },\r\n  ]);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}