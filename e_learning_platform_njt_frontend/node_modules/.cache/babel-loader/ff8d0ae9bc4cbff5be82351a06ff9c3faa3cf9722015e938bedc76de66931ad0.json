{"ast":null,"code":"// src/api/api.js\nconst API = \"/api\";\n\n// /users/me  (i dalje – dok nema auth-a)\nexport async function getMe({\n  userId\n} = {}) {\n  const url = userId ? `${API}/users/me?id=${userId}` : `${API}/users/me`;\n  const res = await fetch(url);\n  if (!res.ok) throw new Error(\"Ne mogu da učitam korisnika.\");\n  return res.json();\n}\n\n// Lista notifikacija sa filterima/sortom\nexport async function getNotifications(userId, {\n  unreadOnly = false,\n  limit = 50,\n  q = \"\",\n  typeId = \"\",\n  sort = \"sentAt\",\n  dir = \"DESC\"\n} = {}) {\n  if (!userId) throw new Error(\"userId je obavezan\");\n  const params = new URLSearchParams();\n  params.set(\"userId\", String(userId));\n  if (unreadOnly) params.set(\"unread\", \"true\");\n  if (limit) params.set(\"limit\", String(limit));\n  if (q) params.set(\"q\", q);\n  if (typeId) params.set(\"typeId\", String(typeId));\n  if (sort) params.set(\"sort\", sort); // npr. \"title\", \"sentAt\"\n  if (dir) params.set(\"dir\", dir); // \"ASC\" | \"DESC\"\n\n  const res = await fetch(`${API}/notifications?${params.toString()}`);\n  if (!res.ok) {\n    const t = await res.text();\n    throw new Error(t || \"Greška pri učitavanju notifikacija.\");\n  }\n  return res.json();\n}\n\n// Broj nepročitanih (badge)\nexport async function getUnreadCount(userId) {\n  if (!userId) return 0;\n  const res = await fetch(`${API}/notifications/unread/count?userId=${userId}`);\n  if (!res.ok) return 0;\n  const n = await res.json();\n  return Number(n || 0);\n}\n\n// Označi jednu kao pročitanu\nexport async function markNotificationRead(id) {\n  const res = await fetch(`${API}/notifications/${id}/read`, {\n    method: \"POST\"\n  });\n  if (!res.ok) throw new Error(\"Greška pri označavanju notifikacije.\");\n  return true;\n}\n\n// Označi sve kao pročitane\nexport async function markAllNotificationsRead(userId) {\n  const res = await fetch(`${API}/notifications/read-all?userId=${userId}`, {\n    method: \"POST\"\n  });\n  if (!res.ok) throw new Error(\"Greška pri označavanju svih notifikacija.\");\n  return true;\n}\n\n// Lookup: tipovi notifikacija (id -> name)\nexport async function getNotificationTypes() {\n  const res = await fetch(`${API}/notification-types`);\n  if (!res.ok) {\n    const t = await res.text();\n    throw new Error(t || \"Ne mogu da učitam tipove notifikacija.\");\n  }\n  return res.json(); // [{id, name}]\n}\n\n// (Demo) preporučeni kursevi\nexport async function getRecommendedCourses() {\n  return Promise.resolve([{\n    id: 1,\n    title: \"Java za početnike\",\n    meta: \"8h • 24 lekcije\"\n  }, {\n    id: 2,\n    title: \"Spring Boot REST API\",\n    meta: \"6h • 18 lekcija\"\n  }, {\n    id: 3,\n    title: \"React osnove\",\n    meta: \"5h • 15 lekcija\"\n  }]);\n}","map":{"version":3,"names":["API","getMe","userId","url","res","fetch","ok","Error","json","getNotifications","unreadOnly","limit","q","typeId","sort","dir","params","URLSearchParams","set","String","toString","t","text","getUnreadCount","n","Number","markNotificationRead","id","method","markAllNotificationsRead","getNotificationTypes","getRecommendedCourses","Promise","resolve","title","meta"],"sources":["C:/Users/mikir/Documents/NetBeansProjects/NJT_Projekat/e_learning_platform_njt_frontend/src/api/api.js"],"sourcesContent":["// src/api/api.js\r\nconst API = \"/api\";\r\n\r\n// /users/me  (i dalje – dok nema auth-a)\r\nexport async function getMe({ userId } = {}) {\r\n  const url = userId ? `${API}/users/me?id=${userId}` : `${API}/users/me`;\r\n  const res = await fetch(url);\r\n  if (!res.ok) throw new Error(\"Ne mogu da učitam korisnika.\");\r\n  return res.json();\r\n}\r\n\r\n// Lista notifikacija sa filterima/sortom\r\nexport async function getNotifications(userId, {\r\n  unreadOnly = false,\r\n  limit = 50,\r\n  q = \"\",\r\n  typeId = \"\",\r\n  sort = \"sentAt\",\r\n  dir = \"DESC\",\r\n} = {}) {\r\n  if (!userId) throw new Error(\"userId je obavezan\");\r\n\r\n  const params = new URLSearchParams();\r\n  params.set(\"userId\", String(userId));\r\n  if (unreadOnly) params.set(\"unread\", \"true\");\r\n  if (limit) params.set(\"limit\", String(limit));\r\n  if (q) params.set(\"q\", q);\r\n  if (typeId) params.set(\"typeId\", String(typeId));\r\n  if (sort) params.set(\"sort\", sort);   // npr. \"title\", \"sentAt\"\r\n  if (dir) params.set(\"dir\", dir);     // \"ASC\" | \"DESC\"\r\n\r\n  const res = await fetch(`${API}/notifications?${params.toString()}`);\r\n  if (!res.ok) {\r\n    const t = await res.text();\r\n    throw new Error(t || \"Greška pri učitavanju notifikacija.\");\r\n  }\r\n  return res.json();\r\n}\r\n\r\n// Broj nepročitanih (badge)\r\nexport async function getUnreadCount(userId) {\r\n  if (!userId) return 0;\r\n  const res = await fetch(`${API}/notifications/unread/count?userId=${userId}`);\r\n  if (!res.ok) return 0;\r\n  const n = await res.json();\r\n  return Number(n || 0);\r\n}\r\n\r\n// Označi jednu kao pročitanu\r\nexport async function markNotificationRead(id) {\r\n  const res = await fetch(`${API}/notifications/${id}/read`, { method: \"POST\" });\r\n  if (!res.ok) throw new Error(\"Greška pri označavanju notifikacije.\");\r\n  return true;\r\n}\r\n\r\n// Označi sve kao pročitane\r\nexport async function markAllNotificationsRead(userId) {\r\n  const res = await fetch(`${API}/notifications/read-all?userId=${userId}`, { method: \"POST\" });\r\n  if (!res.ok) throw new Error(\"Greška pri označavanju svih notifikacija.\");\r\n  return true;\r\n}\r\n\r\n// Lookup: tipovi notifikacija (id -> name)\r\nexport async function getNotificationTypes() {\r\n  const res = await fetch(`${API}/notification-types`);\r\n  if (!res.ok) {\r\n    const t = await res.text();\r\n    throw new Error(t || \"Ne mogu da učitam tipove notifikacija.\");\r\n  }\r\n  return res.json(); // [{id, name}]\r\n}\r\n\r\n// (Demo) preporučeni kursevi\r\nexport async function getRecommendedCourses() {\r\n  return Promise.resolve([\r\n    { id: 1, title: \"Java za početnike\", meta: \"8h • 24 lekcije\" },\r\n    { id: 2, title: \"Spring Boot REST API\", meta: \"6h • 18 lekcija\" },\r\n    { id: 3, title: \"React osnove\", meta: \"5h • 15 lekcija\" },\r\n  ]);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}