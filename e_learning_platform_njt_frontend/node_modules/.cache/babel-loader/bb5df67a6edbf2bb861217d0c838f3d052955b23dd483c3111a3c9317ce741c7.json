{"ast":null,"code":"// src/api/api.js\nimport http from \"./http\";\n\n// helper: pročitaj trenutni userId iz localStorage (setuje se u Login/Register)\nfunction currentUserId() {\n  try {\n    var _u$userId;\n    const u = JSON.parse(localStorage.getItem(\"user\") || \"null\");\n    return (_u$userId = u === null || u === void 0 ? void 0 : u.userId) !== null && _u$userId !== void 0 ? _u$userId : null;\n  } catch {\n    return null;\n  }\n}\nexport async function getMe() {\n  // 1) prefer JWT /users/me\n  try {\n    const {\n      data\n    } = await http.get(\"/users/me\");\n    return data;\n  } catch (e) {\n    // 2) fallback: ako backend traži ?id=\n    const id = currentUserId();\n    if (id != null) {\n      const {\n        data\n      } = await http.get(\"/users/me\", {\n        params: {\n          id\n        }\n      });\n      return data;\n    }\n    // Nema userId u storage-u -> prosledi originalnu grešku\n    throw e;\n  }\n}\nexport async function getUnreadCount() {\n  const id = currentUserId();\n  try {\n    const {\n      data\n    } = await http.get(\"/notifications/unread/count\", {\n      params: id != null ? {\n        userId: id\n      } : undefined\n    });\n    return Number(data || 0);\n  } catch {\n    return 0; // nikad ne ruši UI zbog badge-a\n  }\n}\nexport async function getNotifications({\n  unread = false,\n  limit = 50\n} = {}) {\n  const id = currentUserId();\n  const params = {\n    ...(unread ? {\n      unread: \"true\"\n    } : {}),\n    ...(limit != null ? {\n      limit\n    } : {}),\n    ...(id != null ? {\n      userId: id\n    } : {})\n  };\n  const {\n    data\n  } = await http.get(\"/notifications\", {\n    params\n  });\n  return Array.isArray(data) ? data : [];\n}\nexport async function markNotificationRead(id) {\n  await http.post(`/notifications/${id}/read`);\n  return true;\n}\nexport async function markAllNotificationsRead() {\n  const id = currentUserId();\n  await http.post(`/notifications/read-all`, {\n    // ako backend i dalje očekuje userId u body-ju, ovako ga dobija;\n    // ako ne očekuje — ignorisaće ga.\n    userId: id !== null && id !== void 0 ? id : undefined\n  });\n  return true;\n}\nexport async function getNotificationTypes() {\n  const {\n    data\n  } = await http.get(\"/notification-types\");\n  return Array.isArray(data) ? data : [];\n}\nexport async function deleteNotification(id) {\n  await http.delete(`/notifications/${id}`);\n  return true;\n}\nexport async function getUsers() {\n  const {\n    data\n  } = await http.get(\"/users\");\n  return Array.isArray(data) ? data : [];\n}\nexport function getRecommendedCourses() {\n  return Promise.resolve([{\n    id: 1,\n    title: \"Java for Beginners\",\n    meta: \"8h • 24 lessons\"\n  }, {\n    id: 2,\n    title: \"Spring Boot REST API\",\n    meta: \"6h • 18 lessons\"\n  }, {\n    id: 3,\n    title: \"React Essentials\",\n    meta: \"5h • 15 lessons\"\n  }]);\n}","map":{"version":3,"names":["http","currentUserId","_u$userId","u","JSON","parse","localStorage","getItem","userId","getMe","data","get","e","id","params","getUnreadCount","undefined","Number","getNotifications","unread","limit","Array","isArray","markNotificationRead","post","markAllNotificationsRead","getNotificationTypes","deleteNotification","delete","getUsers","getRecommendedCourses","Promise","resolve","title","meta"],"sources":["C:/Users/mikir/Documents/NetBeansProjects/NJT_Projekat/e_learning_platform_njt_frontend/src/api/api.js"],"sourcesContent":["// src/api/api.js\r\nimport http from \"./http\";\r\n\r\n// helper: pročitaj trenutni userId iz localStorage (setuje se u Login/Register)\r\nfunction currentUserId() {\r\n  try {\r\n    const u = JSON.parse(localStorage.getItem(\"user\") || \"null\");\r\n    return u?.userId ?? null;\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function getMe() {\r\n  // 1) prefer JWT /users/me\r\n  try {\r\n    const { data } = await http.get(\"/users/me\");\r\n    return data;\r\n  } catch (e) {\r\n    // 2) fallback: ako backend traži ?id=\r\n    const id = currentUserId();\r\n    if (id != null) {\r\n      const { data } = await http.get(\"/users/me\", { params: { id } });\r\n      return data;\r\n    }\r\n    // Nema userId u storage-u -> prosledi originalnu grešku\r\n    throw e;\r\n  }\r\n}\r\n\r\nexport async function getUnreadCount() {\r\n  const id = currentUserId();\r\n  try {\r\n    const { data } = await http.get(\"/notifications/unread/count\", {\r\n      params: id != null ? { userId: id } : undefined,\r\n    });\r\n    return Number(data || 0);\r\n  } catch {\r\n    return 0; // nikad ne ruši UI zbog badge-a\r\n  }\r\n}\r\n\r\nexport async function getNotifications({ unread = false, limit = 50 } = {}) {\r\n  const id = currentUserId();\r\n  const params = {\r\n    ...(unread ? { unread: \"true\" } : {}),\r\n    ...(limit != null ? { limit } : {}),\r\n    ...(id != null ? { userId: id } : {}),\r\n  };\r\n  const { data } = await http.get(\"/notifications\", { params });\r\n  return Array.isArray(data) ? data : [];\r\n}\r\n\r\nexport async function markNotificationRead(id) {\r\n  await http.post(`/notifications/${id}/read`);\r\n  return true;\r\n}\r\n\r\nexport async function markAllNotificationsRead() {\r\n  const id = currentUserId();\r\n  await http.post(`/notifications/read-all`, {\r\n    // ako backend i dalje očekuje userId u body-ju, ovako ga dobija;\r\n    // ako ne očekuje — ignorisaće ga.\r\n    userId: id ?? undefined,\r\n  });\r\n  return true;\r\n}\r\n\r\nexport async function getNotificationTypes() {\r\n  const { data } = await http.get(\"/notification-types\");\r\n  return Array.isArray(data) ? data : [];\r\n}\r\n\r\nexport async function deleteNotification(id) {\r\n  await http.delete(`/notifications/${id}`);\r\n  return true;\r\n}\r\n\r\nexport async function getUsers() {\r\n  const { data } = await http.get(\"/users\");\r\n  return Array.isArray(data) ? data : [];\r\n}\r\n\r\nexport function getRecommendedCourses() {\r\n  return Promise.resolve([\r\n    { id: 1, title: \"Java for Beginners\", meta: \"8h • 24 lessons\" },\r\n    { id: 2, title: \"Spring Boot REST API\", meta: \"6h • 18 lessons\" },\r\n    { id: 3, title: \"React Essentials\", meta: \"5h • 15 lessons\" },\r\n  ]);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}